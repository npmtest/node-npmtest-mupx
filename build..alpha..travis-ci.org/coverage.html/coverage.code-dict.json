{"/home/travis/build/npmtest/node-npmtest-mupx/test.js":"/* istanbul instrument in package npmtest_mupx */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-mupx/lib.npmtest_mupx.js":"/* istanbul instrument in package npmtest_mupx */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_mupx = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_mupx = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-mupx/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-mupx && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_mupx */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_mupx\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_mupx.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_mupx.rollup.js'] =\n            local.assetsDict['/assets.npmtest_mupx.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_mupx.__dirname + '/lib.npmtest_mupx.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-mupx/node_modules/mupx/lib/actions.js":"var nodemiral = require('nodemiral');\nvar path = require('path');\nvar fs = require('fs');\nvar rimraf = require('rimraf');\nvar exec = require('child_process').exec;\nvar spawn = require('child_process').spawn;\nvar uuid = require('uuid');\nvar format = require('util').format;\nvar extend = require('util')._extend;\nvar _ = require('underscore');\nvar async = require('async');\nvar buildApp = require('./build.js');\n\nrequire('colors');\n\nmodule.exports = Actions;\n\nfunction Actions(config, cwd, options) {\n  this.cwd = cwd;\n  this.config = config;\n  this.sessionsMap = this._createSessionsMap(config);\n  this.settingsFileName = options.settingsFileName;\n\n  //get settingsFileName into env\n  var setttingsJsonPath = path.resolve(this.cwd, this.settingsFileName);\n  if(fs.existsSync(setttingsJsonPath)) {\n    this.config.env['METEOR_SETTINGS'] = JSON.stringify(require(setttingsJsonPath));\n  }\n}\n\nActions.prototype._createSessionsMap = function(config) {\n  var sessionsMap = {};\n\n  config.servers.forEach(function(server) {\n    var host = server.host;\n    var auth = {username: server.username};\n\n    if(server.pem) {\n      auth.pem = fs.readFileSync(path.resolve(server.pem), 'utf8');\n    } else {\n      auth.password = server.password;\n    }\n\n    var nodemiralOptions = {\n      ssh: server.sshOptions,\n      keepAlive: true\n    };\n\n    if(!sessionsMap[server.os]) {\n      sessionsMap[server.os] = {\n        sessions: [],\n        taskListsBuilder:require('./taskLists')(server.os)\n      };\n    }\n\n    var session = nodemiral.session(host, auth, nodemiralOptions);\n    session._serverConfig = server;\n    sessionsMap[server.os].sessions.push(session);\n  });\n\n  return sessionsMap;\n};\n\nvar kadiraRegex = /^meteorhacks:kadira/m;\nActions.prototype._showKadiraLink = function() {\n  var versionsFile = path.join(this.config.app, '.meteor/versions');\n  if(fs.existsSync(versionsFile)) {\n    var packages = fs.readFileSync(versionsFile, 'utf-8');\n    var hasKadira = kadiraRegex.test(packages);\n    if(!hasKadira) {\n      console.log(\n        \"“ Checkout \" + \"Kadira\".bold + \"!\"+\n        \"\\n  It's the best way to monitor performance of your app.\"+\n        \"\\n  Visit: \" + \"https://kadira.io/mup\".underline + \" ”\\n\"\n      );\n    }\n  }\n}\n\nActions.prototype._executePararell = function(actionName, args) {\n  var self = this;\n  var sessionInfoList = _.values(self.sessionsMap);\n  async.map(\n    sessionInfoList,\n    function(sessionsInfo, callback) {\n      var taskList = sessionsInfo.taskListsBuilder[actionName]\n        .apply(sessionsInfo.taskListsBuilder, args);\n      taskList.run(sessionsInfo.sessions, function(summaryMap) {\n        callback(null, summaryMap);\n      });\n    },\n    whenAfterCompleted\n  );\n};\n\nActions.prototype.setup = function() {\n  this._showKadiraLink();\n  this._executePararell(\"setup\", [this.config]);\n};\n\nActions.prototype.deploy = function() {\n  var self = this;\n  self._showKadiraLink();\n\n  var buildLocation = path.resolve('/tmp', uuid.v4());\n  var bundlePath = path.resolve(buildLocation, 'bundle.tar.gz');\n\n  // spawn inherits env vars from process.env\n  // so we can simply set them like this\n  process.env.BUILD_LOCATION = buildLocation;\n\n  var deployCheckWaitTime = this.config.deployCheckWaitTime;\n  var appName = this.config.appName;\n  var appPath = this.config.app;\n  var buildOptions = this.config.buildOptions;\n\n  console.log('Meteor app path    : ' + this.config.app);\n  console.log('Using buildOptions : ' + JSON.stringify(buildOptions));\n  buildApp(appPath, buildLocation, buildOptions, function(err) {\n    if(err) {\n      process.exit(1);\n    } else {\n      var sessionsData = [];\n      _.forEach(self.sessionsMap, function (sessionsInfo) {\n        var taskListsBuilder = sessionsInfo.taskListsBuilder;\n        _.forEach(sessionsInfo.sessions, function (session) {\n          sessionsData.push({\n            taskListsBuilder: taskListsBuilder,\n            session: session\n          });\n        });\n      });\n\n      async.mapSeries(\n        sessionsData,\n        function (sessionData, callback) {\n          var session = sessionData.session;\n          var taskListsBuilder = sessionData.taskListsBuilder\n          var env = _.extend({}, self.config.env, session._serverConfig.env);\n          var taskList = taskListsBuilder.deploy(\n            bundlePath, env, self.config);\n          taskList.run(session, function (summaryMap) {\n            callback(null, summaryMap);\n          });\n        },\n        whenAfterDeployed(buildLocation)\n      )\n    }\n  });\n};\n\nActions.prototype.reconfig = function() {\n  var self = this;\n  var sessionInfoList = [];\n  for(var os in self.sessionsMap) {\n    var sessionsInfo = self.sessionsMap[os];\n    sessionsInfo.sessions.forEach(function(session) {\n      var env = _.extend({}, self.config.env, session._serverConfig.env);\n      var taskList = sessionsInfo.taskListsBuilder.reconfig(\n        env, self.config);\n      sessionInfoList.push({\n        taskList: taskList,\n        session: session\n      });\n    });\n  }\n\n  async.mapSeries(\n    sessionInfoList,\n    function(sessionsInfo, callback) {\n      sessionsInfo.taskList.run(sessionsInfo.session, function(summaryMap) {\n        callback(null, summaryMap);\n      });\n    },\n    whenAfterCompleted\n  );\n};\n\nActions.prototype.restart = function() {\n  this._executePararell(\"restart\", [this.config]);\n};\n\nActions.prototype.stop = function() {\n  this._executePararell(\"stop\", [this.config]);\n};\n\nActions.prototype.start = function() {\n  this._executePararell(\"start\", [this.config]);\n};\n\nActions.prototype.logs = function() {\n  var self = this;\n  var tailOptions = process.argv.slice(3).join(\" \");\n\n  var sessions = [];\n\n  for(var os in self.sessionsMap) {\n    var sessionsInfo = self.sessionsMap[os];\n    sessionsInfo.sessions.forEach(function(session) {\n      sessions.push(session);\n    });\n  }\n\n  async.map(\n    sessions,\n    function(session, callback) {\n      var hostPrefix = '[' + session._host + '] ';\n      var options = {\n        onStdout: function(data) {\n          process.stdout.write(hostPrefix + data.toString());\n        },\n        onStderr: function(data) {\n          process.stderr.write(hostPrefix + data.toString());\n        }\n      };\n\n      var command = 'sudo docker logs ' + tailOptions + ' ' + self.config.appName;\n      session.execute(command, options, callback);\n    },\n    whenAfterCompleted\n  );\n};\n\nActions.init  = function() {\n  var destMupJson = path.resolve('mup.json');\n  var destSettingsJson = path.resolve('settings.json');\n\n  if(fs.existsSync(destMupJson) || fs.existsSync(destSettingsJson)) {\n    console.error('A Project Already Exists'.bold.red);\n    process.exit(1);\n  }\n\n  var exampleMupJson = path.resolve(__dirname, '../example/mup.json');\n  var exampleSettingsJson = path.resolve(__dirname, '../example/settings.json');\n\n  copyFile(exampleMupJson, destMupJson);\n  copyFile(exampleSettingsJson, destSettingsJson);\n\n  console.log('Empty Project Initialized!'.bold.green);\n\n  function copyFile(src, dest) {\n    var content = fs.readFileSync(src, 'utf8');\n    fs.writeFileSync(dest, content);\n  }\n};\n\nfunction storeLastNChars(vars, field, limit, color) {\n  return function(data) {\n    vars[field] += data.toString();\n    if(vars[field].length > 1000) {\n      vars[field] = vars[field].substring(vars[field].length - 1000);\n    }\n  }\n}\n\nfunction whenAfterDeployed(buildLocation) {\n  return function(error, summaryMaps) {\n    rimraf.sync(buildLocation);\n    whenAfterCompleted(error, summaryMaps);\n  };\n}\n\nfunction whenAfterCompleted(error, summaryMaps) {\n  var errorCode = error || haveSummaryMapsErrors(summaryMaps) ? 1 : 0;\n  process.exit(errorCode);\n}\n\nfunction haveSummaryMapsErrors(summaryMaps) {\n  return _.some(summaryMaps, hasSummaryMapErrors);\n}\n\nfunction hasSummaryMapErrors(summaryMap) {\n  return _.some(summaryMap, function (summary) {\n    return summary.error;\n  })\n}\n","/home/travis/build/npmtest/node-npmtest-mupx/node_modules/mupx/lib/build.js":"var spawn = require('child_process').spawn;\nvar archiver = require('archiver');\nvar fs = require('fs');\nvar pathResolve = require('path').resolve;\nvar _ = require('underscore');\n\nfunction buildApp(appPath, buildLocaltion, buildOptions, callback) {\n  buildMeteorApp(appPath, buildLocaltion, buildOptions, function(code) {\n    if(code == 0) {\n      archiveIt(buildLocaltion, callback);\n    } else {\n      console.log(\"\\n=> Build Error. Check the logs printed above.\");\n      callback(new Error(\"build-error\"));\n    }\n  });\n}\n\nfunction buildMeteorApp(appPath, buildLocaltion, buildOptions, callback) {\n  var executable = buildOptions.executable || \"meteor\";\n  var args = [\n    \"build\", \"--directory\", buildLocaltion, \n    \"--architecture\", \"os.linux.x86_64\",\n    \"--server\", \"http://localhost:3000\"\n  ];\n\n  if(buildOptions.debug) {\n    args.push(\"--debug\");\n  }\n\n  if(buildOptions.mobileSettings) {\n    args.push('--mobile-settings');\n    args.push(JSON.stringify(buildOptions.mobileSettings));\n  }\n  \n  var isWin = /^win/.test(process.platform);\n  if(isWin) {\n    // Sometimes cmd.exe not available in the path\n    // See: http://goo.gl/ADmzoD\n    executable = process.env.comspec || \"cmd.exe\";\n    args = [\"/c\", \"meteor\"].concat(args);\n  }\n\n  var options = {cwd: appPath};\n  var meteor = spawn(executable, args, options);\n  var stdout = \"\";\n  var stderr = \"\";\n\n  meteor.stdout.pipe(process.stdout, {end: false});\n  meteor.stderr.pipe(process.stderr, {end: false});\n\n  meteor.on('close', callback);\n}\n\nfunction archiveIt(buildLocaltion, callback) {\n  callback = _.once(callback);\n  var bundlePath = pathResolve(buildLocaltion, 'bundle.tar.gz');\n  var sourceDir = pathResolve(buildLocaltion, 'bundle');\n\n  var output = fs.createWriteStream(bundlePath);\n  var archive = archiver('tar', {\n    gzip: true,\n    gzipOptions: {\n      level: 6\n    }\n  });\n\n  archive.pipe(output);\n  output.once('close', callback);\n\n  archive.once('error', function(err) {\n    console.log(\"=> Archiving failed:\", err.message);\n    callback(err);\n  });\n\n  archive.directory(sourceDir, 'bundle').finalize();\n}\n\nmodule.exports = buildApp;","/home/travis/build/npmtest/node-npmtest-mupx/node_modules/mupx/lib/config.js":"var cjson = require('cjson');\nvar path = require('path');\nvar fs = require('fs');\nvar helpers = require('./helpers');\nvar format = require('util').format;\nrequire('colors');\n\nexports.read = function(configFileName) {\n  var mupJsonPath = path.resolve(configFileName);\n  // path of the mup.json file is the basedir and everything\n  // will be based on that path\n  var basedir = path.dirname(mupJsonPath);\n\n  if(fs.existsSync(mupJsonPath)) {\n    var mupJson = cjson.load(mupJsonPath);\n\n    //initialize options\n    mupJson.env = mupJson.env || {};\n    mupJson.env['PORT'] = mupJson.env['PORT'] || 80;\n\n    if(typeof mupJson.setupNode === \"undefined\") {\n      mupJson.setupNode = true;\n    }\n    if(typeof mupJson.setupPhantom === \"undefined\") {\n      mupJson.setupPhantom = true;\n    }\n    if(typeof mupJson.appName === \"undefined\") {\n      mupJson.appName = \"meteor\";\n    }\n\n    if(typeof mupJson.enableUploadProgressBar === \"undefined\") {\n      mupJson.enableUploadProgressBar = true;\n    }\n\n    //validating servers\n    if(!mupJson.servers || mupJson.servers.length == 0) {\n      mupErrorLog('Server information does not exist');\n    } else {\n      mupJson.servers.forEach(function(server) {\n        var sshAgentExists = false;\n        var sshAgent = process.env.SSH_AUTH_SOCK;\n        if(sshAgent) {\n          sshAgentExists = fs.existsSync(sshAgent);\n          server.sshOptions = server.sshOptions || {};\n          server.sshOptions.agent = sshAgent;\n        }\n\n        if(!server.host) {\n          mupErrorLog('Server host does not exist');\n        } else if(!server.username) {\n          mupErrorLog('Server username does not exist');\n        } else if(!server.password && !server.pem && !sshAgentExists) {\n          mupErrorLog('Server password, pem or a ssh agent does not exist');\n        } else if(!mupJson.app) {\n          mupErrorLog('Path to app does not exist');\n        }\n\n        server.os = server.os || \"linux\";\n\n        if(server.pem) {\n          server.pem =\n            rewritePath(server.pem, \"SSH private key file is invalid\");\n        }\n\n        server.env = server.env || {};\n\n        var defaultEndpointUrl =\n          format(\"http://%s:%s\", server.host, mupJson.env['PORT']);\n        server.env['CLUSTER_ENDPOINT_URL'] =\n          server.env['CLUSTER_ENDPOINT_URL'] || defaultEndpointUrl;\n      });\n    }\n\n    //rewrite ~ with $HOME\n    mupJson.app = rewritePath(\n      mupJson.app, \"There is no meteor app in the current app path.\");\n\n    if(mupJson.ssl) {\n      mupJson.ssl.port = mupJson.ssl.port || 443;\n      mupJson.ssl.certificate = rewritePath(\n        mupJson.ssl.certificate, \"SSL certificate file does not exists.\");\n      mupJson.ssl.key = rewritePath(\n        mupJson.ssl.key, \"SSL key file does not exists.\");\n    }\n\n    // additional build options\n    mupJson.buildOptions = mupJson.buildOptions || {};\n\n    return mupJson;\n  } else {\n      var message =\n        'configuration file ' + configFileName + ' does not exist!'.red.bold;\n    console.error(message);\n    helpers.printHelp();\n    process.exit(1);\n  }\n  \n  function rewritePath(location, errorMessage) {\n    if(!location) {\n      return mupErrorLog(errorMessage);\n    }\n    \n    var homeLocation = process.env.HOME;\n    if(/^win/.test(process.platform)) {\n      homeLocation = process.env.USERPROFILE;\n    }\n\n    var location = location.replace('~', homeLocation).trim();\n    if(location.indexOf(0) !== \"/\" || location.indexOf(0) !== \"\\\\\") {\n      // if path does not start with / or \\ (on windows)\n      // we need to make sure, they are from the basedir\n      // but not from the current dir\n      location = path.resolve(basedir, location);\n    } else {\n      // anyway, we need to resolve path for windows compatibility\n      location = path.resolve(location);\n    }\n    if(!fs.existsSync(location)) {\n      mupErrorLog(errorMessage);\n    }\n\n    return location;\n  }\n\n  function mupErrorLog(message) {\n    var errorMessage = 'Invalid configuration file ' + configFileName + ': ' + message;\n    console.error(errorMessage.red.bold);\n    process.exit(1);\n  }\n};","/home/travis/build/npmtest/node-npmtest-mupx/node_modules/mupx/lib/helpers.js":"var exec = require('child_process').exec;\n\nexports.printHelp = function() {\n  console.error('\\nSyntax: mup <action> [--<parameter>]');\n  console.error('');\n  console.error('\\nValid Actions (mandatory)');\n  console.error('---------------------------');\n  console.error('init                   - Initialize a Meteor Up project');\n  console.error('setup                  - Setup the server');\n  console.error('');\n  console.error('deploy                 - Deploy app to server');\n  console.error('reconfig               - Reconfigure the server and restart');\n  console.error('');\n  console.error('logs [-f --tail=all]   - Access logs');\n  console.error('');\n  console.error('start                  - Start your app instances');\n  console.error('stop                   - Stop your app instances');\n  console.error('restart                - Restart your app instances');\n  console.error('\\nAvailable Parameters (optional)');\n  console.error('---------------------------------');\n  console.error('--config=mup-prod.json - Specify the deployment configuration');\n  console.error('                         Default value: mup.json');\n  console.error('--settings=file.json   - Specify the Meteor.settings file');\n  console.error('                         Default value: settings.json');\n};\n","/home/travis/build/npmtest/node-npmtest-mupx/node_modules/mupx/lib/update_notifier.js":"var updateNotifier = require('update-notifier');\nvar pkg = require('../package.json');\n \nvar notifier = updateNotifier({\n  pkg: pkg,\n  updateCheckInterval: 1000 * 60 * 60 * 6 // 6 hours\n});\nnotifier.notify();","/home/travis/build/npmtest/node-npmtest-mupx/node_modules/mupx/lib/taskLists/linux.js":"var nodemiral = require('nodemiral');\nvar fs = require('fs');\nvar path = require('path');\nvar util = require('util');\nvar _ = require('underscore');\n\nvar SCRIPT_DIR = path.resolve(__dirname, '../../scripts/linux');\nvar TEMPLATES_DIR = path.resolve(__dirname, '../../templates/linux');\n\nexports.setup = function(config) {\n  var taskList = nodemiral.taskList('Setup (linux)');\n\n  taskList.executeScript('Installing Docker', {\n    script: path.resolve(SCRIPT_DIR, 'install-docker.sh')\n  });\n\n  taskList.executeScript('Setting up Environment', {\n    script: path.resolve(SCRIPT_DIR, 'setup-env.sh'),\n    vars: {\n      appName: config.appName\n    }\n  });\n\n  if(config.setupMongo) {\n    taskList.copy('Copying MongoDB configuration', {\n      src: path.resolve(TEMPLATES_DIR, 'mongodb.conf'),\n      dest: '/opt/mongodb/mongodb.conf'\n    });\n\n    taskList.executeScript('Installing MongoDB', {\n      script: path.resolve(SCRIPT_DIR, 'install-mongodb.sh')\n    });\n  }\n\n  if(config.ssl) {\n    taskList.copy('Copying SSL certificate bundle', {\n      src: config.ssl.certificate,\n      dest: '/opt/' + config.appName + '/config/bundle.crt'\n    });\n\n    taskList.copy('Copying SSL private key', {\n      src: config.ssl.key,\n      dest: '/opt/' + config.appName + '/config/private.key'\n    });\n\n    taskList.executeScript('Verifying SSL configurations', {\n      script: path.resolve(SCRIPT_DIR, 'verify-ssl-configurations.sh'),\n      vars: {\n        appName: config.appName\n      }\n    });\n  }\n\n  return taskList;\n};\n\nexports.deploy = function(bundlePath, env, config) {\n  var deployCheckWaitTime = config.deployCheckWaitTime;\n  var appName = config.appName;\n  var taskList = nodemiral.taskList(\"Deploy app '\" + appName + \"' (linux)\");\n\n  taskList.copy('Uploading bundle', {\n    src: bundlePath,\n    dest: '/opt/' + appName + '/tmp/bundle.tar.gz',\n    progressBar: config.enableUploadProgressBar\n  });\n\n  copyEnvVars(taskList, env, appName);\n\n  taskList.copy('Initializing start script', {\n    src: path.resolve(TEMPLATES_DIR, 'start.sh'),\n    dest: '/opt/' + appName + '/config/start.sh',\n    vars: {\n      appName: appName,\n      useLocalMongo: config.setupMongo,\n      port: env.PORT,\n      sslConfig: config.ssl\n    }\n  });\n\n  deployAndVerify(taskList, appName, env.PORT, deployCheckWaitTime);\n\n  return taskList;\n};\n\nexports.reconfig = function(env, config) {\n  var appName = config.appName;\n  var deployCheckWaitTime = config.deployCheckWaitTime;\n\n  var taskList = nodemiral.taskList(\"Updating configurations (linux)\");\n\n  copyEnvVars(taskList, env, appName);\n  startAndVerify(taskList, appName, env.PORT, deployCheckWaitTime);\n\n  return taskList;\n};\n\nexports.restart = function(config) {\n  var taskList = nodemiral.taskList(\"Restarting Application (linux)\");\n\n  var appName = config.appName;\n  var port = config.env.PORT;\n  var deployCheckWaitTime = config.deployCheckWaitTime;\n\n  startAndVerify(taskList, appName, port, deployCheckWaitTime);\n\n  return taskList;\n};\n\nexports.stop = function(config) {\n  var taskList = nodemiral.taskList(\"Stopping Application (linux)\");\n\n  //stopping\n  taskList.executeScript('Stopping app', {\n    script: path.resolve(SCRIPT_DIR, 'stop.sh'),\n    vars: {\n      appName: config.appName\n    }\n  });\n\n  return taskList;\n};\n\nexports.start = function(config) {\n  var taskList = nodemiral.taskList(\"Starting Application (linux)\");\n\n  var appName = config.appName;\n  var port = config.env.PORT;\n  var deployCheckWaitTime = config.deployCheckWaitTime;\n\n  startAndVerify(taskList, appName, port, deployCheckWaitTime);\n\n  return taskList;\n};\n\nfunction installStud(taskList) {\n  taskList.executeScript('Installing Stud', {\n    script: path.resolve(SCRIPT_DIR, 'install-stud.sh')\n  });\n}\n\nfunction copyEnvVars(taskList, env, appName) {\n  var env = _.clone(env);\n  // sending PORT to the docker container is useless.\n  // It'll run on PORT 80 and we can't override it\n  // Changing the port is done via the start.sh script\n  delete env.PORT;\n  taskList.copy('Sending environment variables', {\n    src: path.resolve(TEMPLATES_DIR, 'env.list'),\n    dest: '/opt/' + appName + '/config/env.list',\n    vars: {\n      env: env || {},\n      appName: appName\n    }\n  });\n}\n\nfunction startAndVerify(taskList, appName, port, deployCheckWaitTime) {\n  taskList.execute('Starting app', {\n    command: \"bash /opt/\" + appName + \"/config/start.sh\"\n  });\n\n  // verifying deployment\n  taskList.executeScript('Verifying deployment', {\n    script: path.resolve(SCRIPT_DIR, 'verify-deployment.sh'),\n    vars: {\n      deployCheckWaitTime: deployCheckWaitTime || 10,\n      appName: appName,\n      port: port\n    }\n  });\n}\n\nfunction deployAndVerify(taskList, appName, port, deployCheckWaitTime) {\n  // deploying\n  taskList.executeScript('Invoking deployment process', {\n    script: path.resolve(SCRIPT_DIR, 'deploy.sh'),\n    vars: {\n      appName: appName\n    }\n  });\n\n  // verifying deployment\n  taskList.executeScript('Verifying deployment', {\n    script: path.resolve(SCRIPT_DIR, 'verify-deployment.sh'),\n    vars: {\n      deployCheckWaitTime: deployCheckWaitTime || 10,\n      appName: appName,\n      port: port\n    }\n  });\n}"}